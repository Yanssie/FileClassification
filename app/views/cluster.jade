extend layout

block content
  .row
    .col-md-8.col-md-offset-2
        .panel.panel-default
          .panel-body
            .pull-right
              .btn-group
                button.btn.btn-success.btn-filter(type='button', data-target='cluster1') Cluster I
                button.btn.btn-warning.btn-filter(type='button', data-target='cluster2') Cluster II
                button.btn.btn-danger.btn-filter(type='button', data-target='cluster3') Cluster III

            .table-container
              table.table.table-filter
                tbody
                  - for (var i = 0; i < cluster1.length; i++)
                    tr(data-status='cluster1')
                      td
                        a.ajax-link(href='#Modal',data-toggle='modal') #{cluster1[i]}
                  - for (var j = 0; j < cluster2.length; j++)
                    tr(data-status='cluster2')
                      td
                        a.ajax-link(href='#Modal',data-toggle='modal') #{cluster2[j]}
                  - for (var k = 0; k < cluster3.length; k++)
                    tr(data-status='cluster3')
                      td
                        a.ajax-link(href='#Modal',data-toggle='modal') #{cluster3[k]}
            +modal("APG", "Modal")
              h5.jcontent
              p.chart


  script(src='https://code.jquery.com/jquery-2.2.0.min.js')
  script(src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js")
  script(src='https://d3js.org/d3.v4.min.js')
  script(src="/../javascripts/cluster.js")

  script.
    $('.ajax-link').on('click', function () {

      var params = { name: $(this).text() };


        //ajax call defined in app 
      $.get( '/ajax_get_json',params, function(data) {
        $('.jcontent').html(JSON.stringify(data));

      // ************** Generate the tree diagram  *****************
        var margin = {top: 20, right: 120, bottom: 20, left: 120},
          width = 960 - margin.right - margin.left,
          height = 500 - margin.top - margin.bottom;
  
        var i = 0;

        var tree = d3.layout.tree()
          .size([height, width]);

        var diagonal = d3.svg.diagonal()
          .projection(function(d) { return [d.y, d.x]; });

        var svg = d3.select(".chart").append("svg")
          .attr("width", width + margin.right + margin.left)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        update(data.nodes);

        function update(root) {
        // Compute the new tree layout.
          var nodes = tree.nodes(root).reverse(),
            links = tree.links(nodes);

        // Normalize for fixed-depth.
          nodes.forEach(function(d) { d.y = d.depth * 180; });

        // Declare the nodes…
          var node = svg.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter the nodes.
          var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function(d) { 
              return "translate(" + d.y + "," + d.x + ")"; });

          nodeEnter.append("circle")
            .attr("r", 10)
            .style("fill", "#fff");

          nodeEnter.append("text")
            .attr("x", function(d) { 
              return d.children || d._children ? -13 : 13; })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) { 
              return d.children || d._children ? "end" : "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1);

        // Declare the links…
          var link = svg.selectAll("path.link")
            .data(links, function(d) { return d.target.id; });

        // Enter the links.
          link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("d", diagonal);
        }




        $('.jcontent').html(JSON.stringify(data));
      });

    });


